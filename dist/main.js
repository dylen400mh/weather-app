(()=>{"use strict";const t=(()=>{const t=document.querySelector("input"),e=document.getElementById("location"),n=document.getElementById("temperature"),o=document.getElementById("condition"),i=document.getElementById("feels-like"),r=document.getElementById("humidity"),c=document.getElementById("wind"),a=document.getElementById("wind-direction"),d=document.getElementById("precipitation"),l=document.getElementById("last-updated"),u=document.getElementById("error"),m=document.getElementById("toggle-units");function s(){t.value=""}function p(t,e=""){t?(u.textContent=e,u.style.display="block"):u.style.display="none"}return{updateDisplay:function(t,u){var g;s(),p(!1),g=u,m.textContent="Metric"===g?"Imperial":"Metric";const y=t.current,{location:h}=t;e.textContent=`${h.name}, ${h.region}, ${h.country}`,o.textContent=y.condition.text,r.textContent=`Humidity: ${y.humidity}`,a.textContent=`Wind Direction: ${y.wind_dir}`,l.textContent=`Last Updated: ${y.last_updated}`,n.textContent="Metric"===u?`${y.temp_c} 째C`:`${y.temp_f} 째F`,c.textContent="Metric"===u?`Wind: ${y.wind_kph} kph`:`Wind: ${y.wind_mph} mph`,i.textContent="Metric"===u?`Feels Like: ${y.feelslike_c} 째C`:`Feels Like: ${y.feelslike_f} 째F`,d.textContent="Metric"===u?`Precipitation: ${y.precip_mm} mm`:`Precipitation: ${y.precip_in} in`},resetInput:s,toggleError:p}})(),e=function(){return new Promise(((t,e)=>{"geolocation"in navigator&&navigator.geolocation.getCurrentPosition((e=>{const{latitude:n,longitude:o}=e.coords;t([n,o])}),(t=>{e(t)}))}))},n=(()=>{const o=document.querySelector("form"),i=document.getElementById("current-location"),r=document.getElementById("toggle-units"),c=document.getElementById("location");let a="Metric";async function d(e){try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=fda6ad22a48445cabbe213714230208&q=${e}`,{mode:"cors"});return await t.json()}catch(e){throw t.toggleError(!0,e.message),e}}return o.addEventListener("submit",(e=>{e.preventDefault();const n=e.target.querySelector("input").value;n&&d(n).then((e=>{try{t.updateDisplay(e,a)}catch{t.toggleError(!0,e.error.message)}}))})),i.addEventListener("click",(async()=>{const[o,i]=await e();n.getWeatherData(`${o},${i}`).then((e=>{t.updateDisplay(e,a)}))})),r.addEventListener("click",(()=>{a="Metric"===a?"Imperial":"Metric",n.getWeatherData(c.textContent).then((e=>{t.updateDisplay(e,a)}))})),{getWeatherData:d}})(),o=n;e().then((e=>{if(e){const[n,i]=[e[0],e[1]];o.getWeatherData(`${n},${i}`).then((e=>{t.updateDisplay(e,"Metric")}))}else o.getWeatherData("toronto").then((e=>{t.updateDisplay(e,"Metric")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,