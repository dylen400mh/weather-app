(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,":root {\n  --colorPrimary: rgb(0, 204, 255);\n  --colorAccent: rgb(34, 71, 80);\n  --colorGrey: #f2f5f5;\n  --colorText: #565360;\n  --colorLabel: #908e9b;\n  --colorDisabled: #e1dfe9;\n  --lengthSm1: 0.25rem;\n  --lengthSm2: 0.375rem;\n  --lengthSm3: 0.5rem;\n  --lengthMd1: 1rem;\n  --lengthMd2: 1.25rem;\n  --lengthMd3: 1.5rem;\n  --lengthLg1: 2rem;\n  --lengthLg2: 3rem;\n  --lengthLg3: 4rem;\n}\n\nbody {\n  margin: 0;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n.header {\n  grid-column: span 2;\n  grid-row: span 1;\n  font-size: var(--lengthLg3);\n  padding: 1.5rem 3rem;\n  background: var(--colorPrimary);\n  color: var(--colorGrey);\n}\n\n.lookup {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n  background: var(--colorGrey);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 1rem;\n}\n\nform {\n  display: flex;\n  gap: 1rem;\n}\n\n.info {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n#weather-info {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,gCAAgC;EAChC,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,qBAAqB;EACrB,wBAAwB;EACxB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,oBAAoB;EACpB,mBAAmB;EACnB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,iBAAiB;EACjB,aAAa;EACb,8BAA8B;EAC9B,4BAA4B;AAC9B;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,2BAA2B;EAC3B,oBAAoB;EACpB,+BAA+B;EAC/B,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,4BAA4B;EAC5B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;AACd",sourcesContent:[":root {\r\n  --colorPrimary: rgb(0, 204, 255);\r\n  --colorAccent: rgb(34, 71, 80);\r\n  --colorGrey: #f2f5f5;\r\n  --colorText: #565360;\r\n  --colorLabel: #908e9b;\r\n  --colorDisabled: #e1dfe9;\r\n  --lengthSm1: 0.25rem;\r\n  --lengthSm2: 0.375rem;\r\n  --lengthSm3: 0.5rem;\r\n  --lengthMd1: 1rem;\r\n  --lengthMd2: 1.25rem;\r\n  --lengthMd3: 1.5rem;\r\n  --lengthLg1: 2rem;\r\n  --lengthLg2: 3rem;\r\n  --lengthLg3: 4rem;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  min-height: 100vh;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: auto 1fr;\r\n}\r\n\r\n.header {\r\n  grid-column: span 2;\r\n  grid-row: span 1;\r\n  font-size: var(--lengthLg3);\r\n  padding: 1.5rem 3rem;\r\n  background: var(--colorPrimary);\r\n  color: var(--colorGrey);\r\n}\r\n\r\n.lookup {\r\n  grid-column: 1 / 2;\r\n  grid-row: 2 / 3;\r\n  background: var(--colorGrey);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  gap: 1rem;\r\n}\r\n\r\n.info {\r\n  grid-column: 2 / 3;\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n#weather-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.25rem;\r\n}\r\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=r.base?l[0]+r.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var A=t(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var p=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var l=r(e,o),s=0;s<a.length;s++){var d=t(a[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=(()=>{const e=document.querySelector("input"),n=document.getElementById("location"),t=document.getElementById("temperature"),r=document.getElementById("condition"),o=document.getElementById("feels-like"),a=document.getElementById("humidity"),i=document.getElementById("wind"),c=document.getElementById("wind-direction"),l=document.getElementById("precipitation"),s=document.getElementById("last-updated"),d=document.getElementById("error"),u=document.getElementById("toggle-units");function A(){e.value=""}function m(e,n=""){e?(d.textContent=n,d.style.display="block"):d.style.display="none"}return{updateDisplay:function(e,d){var p;A(),m(!1),p=d,u.textContent="Metric"===p?"Imperial":"Metric";const{location:g,current:f}=e;n.textContent=`${g.name}, ${g.region}, ${g.country}`,r.textContent=f.condition.text,a.textContent=`Humidity: ${f.humidity}`,c.textContent=`Wind Direction: ${f.wind_dir}`,s.textContent=`Last Updated: ${f.last_updated}`,t.textContent="Metric"===d?`${f.temp_c} 째C`:`${f.temp_f} 째F`,i.textContent="Metric"===d?`Wind: ${f.wind_kph} kph`:`Wind: ${f.wind_mph} mph`,o.textContent="Metric"===d?`Feels Like: ${f.feelslike_c} 째C`:`Feels Like: ${f.feelslike_f} 째F`,l.textContent="Metric"===d?`Precipitation: ${f.precip_mm} mm`:`Precipitation: ${f.precip_in} in`},resetInput:A,toggleError:m}})(),n=function(){return new Promise(((e,n)=>{"geolocation"in navigator?navigator.geolocation.getCurrentPosition((n=>{const{latitude:t,longitude:r}=n.coords;e([t,r])}),(()=>{e(null)})):n(new Error("Geolocation is not available in this browser."))}))},r=(()=>{const t=document.querySelector("form"),o=document.getElementById("current-location"),a=document.getElementById("toggle-units"),i=document.getElementById("temperature"),c=document.getElementById("location");let l="Metric";function s(){l="Metric"===l?"Imperial":"Metric"}async function d(n){try{const e=await fetch(`https://api.weatherapi.com/v1/current.json?key=fda6ad22a48445cabbe213714230208&q=${n}`,{mode:"cors"});return await e.json()}catch(n){throw e.toggleError(!0,n.message),n}}return t.addEventListener("submit",(n=>{n.preventDefault();const t=n.target.querySelector("input").value;t&&d(t).then((n=>{try{e.updateDisplay(n,l)}catch{e.toggleError(!0,n.error.message)}}))})),o.addEventListener("click",(async()=>{const[t,o]=await n();r.getWeatherData(`${t},${o}`).then((n=>{e.updateDisplay(n,l)}))})),i.addEventListener("click",(()=>{s(),r.getWeatherData(c.textContent).then((n=>{e.updateDisplay(n,l)}))})),a.addEventListener("click",(()=>{s(),r.getWeatherData(c.textContent).then((n=>{e.updateDisplay(n,l)}))})),{getWeatherData:d}})(),o=r;var a=t(379),i=t.n(a),c=t(795),l=t.n(c),s=t(569),d=t.n(s),u=t(565),A=t.n(u),m=t(216),p=t.n(m),g=t(589),f=t.n(g),B=t(426),y={};y.styleTagTransform=f(),y.setAttributes=A(),y.insert=d().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=p(),i()(B.Z,y),B.Z&&B.Z.locals&&B.Z.locals,n().then((n=>{if(n){const[t,r]=[n[0],n[1]];o.getWeatherData(`${t},${r}`).then((n=>{e.updateDisplay(n,"Metric")}))}else o.getWeatherData("toronto").then((n=>{e.updateDisplay(n,"Metric")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,