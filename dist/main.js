(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),o=r.n(t),A=r(645),a=r.n(A)()(o());a.push([n.id,'/* CSS VARIABLES */\n:root {\n  --colorPrimary: rgb(0, 204, 255);\n  --colorAccent: rgb(34, 71, 80);\n  --colorAccentHover: rgb(39, 110, 128);\n  --colorGrey: #f2f5f5;\n  --colorText: #565360;\n  --colorLabel: #908e9b;\n  --colorDisabled: #e1dfe9;\n  --lengthSm1: 0.25rem;\n  --lengthSm2: 0.375rem;\n  --lengthSm3: 0.5rem;\n  --lengthMd1: 1rem;\n  --lengthMd2: 1.25rem;\n  --lengthMd3: 1.5rem;\n  --lengthLg1: 2rem;\n  --lengthLg2: 3rem;\n  --lengthLg3: 4rem;\n}\n\nbody {\n  margin: 0;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto 1fr;\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\n}\n\n/* HEADER */\n.header {\n  grid-column: span 2;\n  grid-row: span 1;\n  font-size: var(--lengthLg3);\n  padding: 1.5rem 3rem;\n  background: var(--colorPrimary);\n  color: var(--colorGrey);\n}\n\n/* LOOKUP CONTAINER */\n.lookup {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n  background: var(--colorGrey);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 2rem 5rem;\n}\n\n#error {\n  font-size: --var(--lengthSm1);\n  color: red;\n}\n\nform {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n}\n\ninput {\n  font-size: var(--lengthMd3);\n  padding: 0.75rem 1rem;\n  outline: none;\n  border: 2px solid var(--colorAccent);\n  border-radius: 10px;\n  padding-left: 0.5rem;\n}\n\nbutton {\n  font-size: var(--lengthMd3);\n  background: var(--colorAccent);\n  border: none;\n  color: var(--colorGrey);\n  padding: 1rem;\n  border-radius: 10px;\n}\n\nbutton:hover {\n  cursor: pointer;\n  background: var(--colorAccentHover);\n}\n\n/* INFO CONTAINER */\n.info {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem 5rem;\n  font-size: var(--lengthLg1);\n  color: var(--colorText);\n  text-align: center;\n}\n\n#condition,\n#location,\n#temperature {\n  color: var(--colorAccent);\n}\n\n#condition {\n  align-self: flex-start;\n}\n\n#location {\n  align-self: flex-start;\n  font-size: var(--lengthLg3);\n}\n\n#temperature {\n  font-size: var(--lengthLg3);\n  align-self: flex-end;\n  color: var(--colorPrimary);\n  border-radius: 10px;\n  padding: 0.5rem;\n}\n\n#temperature:hover {\n  background: var(--colorGrey);\n}\n\n.temp-condition-container {\n  display: flex;\n  gap: 3rem;\n  align-items: center;\n}\n\nbutton#toggle-units {\n  margin-top: 1rem;\n  width: 130px;\n}\n\n/* MEDIA QUERY */\n@media (max-width: 1000px) {\n  body {\n    grid-template-columns: 1fr; /* Change grid layout to one column */\n  }\n\n  .header {\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n  }\n\n  .lookup {\n    grid-column: 1 / 2; /* Change to span only one column */\n    grid-row: 2 / 3;\n  }\n\n  .info {\n    grid-column: 1 / 2; /* Change to span only one column */\n    grid-row: 3 / 4;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,kBAAkB;AAClB;EACE,gCAAgC;EAChC,8BAA8B;EAC9B,qCAAqC;EACrC,oBAAoB;EACpB,oBAAoB;EACpB,qBAAqB;EACrB,wBAAwB;EACxB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,oBAAoB;EACpB,mBAAmB;EACnB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,iBAAiB;EACjB,aAAa;EACb,+BAA+B;EAC/B,4BAA4B;EAC5B,2DAA2D;AAC7D;;AAEA,WAAW;AACX;EACE,mBAAmB;EACnB,gBAAgB;EAChB,2BAA2B;EAC3B,oBAAoB;EACpB,+BAA+B;EAC/B,uBAAuB;AACzB;;AAEA,qBAAqB;AACrB;EACE,kBAAkB;EAClB,eAAe;EACf,4BAA4B;EAC5B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,SAAS;EACT,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;EAC7B,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,2BAA2B;EAC3B,qBAAqB;EACrB,aAAa;EACb,oCAAoC;EACpC,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,2BAA2B;EAC3B,8BAA8B;EAC9B,YAAY;EACZ,uBAAuB;EACvB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mCAAmC;AACrC;;AAEA,mBAAmB;AACnB;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,2BAA2B;EAC3B,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;;;EAGE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,2BAA2B;EAC3B,oBAAoB;EACpB,0BAA0B;EAC1B,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA,gBAAgB;AAChB;EACE;IACE,0BAA0B,EAAE,qCAAqC;EACnE;;EAEA;IACE,kBAAkB;IAClB,eAAe;EACjB;;EAEA;IACE,kBAAkB,EAAE,mCAAmC;IACvD,eAAe;EACjB;;EAEA;IACE,kBAAkB,EAAE,mCAAmC;IACvD,eAAe;EACjB;AACF",sourcesContent:['/* CSS VARIABLES */\r\n:root {\r\n  --colorPrimary: rgb(0, 204, 255);\r\n  --colorAccent: rgb(34, 71, 80);\r\n  --colorAccentHover: rgb(39, 110, 128);\r\n  --colorGrey: #f2f5f5;\r\n  --colorText: #565360;\r\n  --colorLabel: #908e9b;\r\n  --colorDisabled: #e1dfe9;\r\n  --lengthSm1: 0.25rem;\r\n  --lengthSm2: 0.375rem;\r\n  --lengthSm3: 0.5rem;\r\n  --lengthMd1: 1rem;\r\n  --lengthMd2: 1.25rem;\r\n  --lengthMd3: 1.5rem;\r\n  --lengthLg1: 2rem;\r\n  --lengthLg2: 3rem;\r\n  --lengthLg3: 4rem;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  min-height: 100vh;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr;\r\n  grid-template-rows: auto 1fr;\r\n  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;\r\n}\r\n\r\n/* HEADER */\r\n.header {\r\n  grid-column: span 2;\r\n  grid-row: span 1;\r\n  font-size: var(--lengthLg3);\r\n  padding: 1.5rem 3rem;\r\n  background: var(--colorPrimary);\r\n  color: var(--colorGrey);\r\n}\r\n\r\n/* LOOKUP CONTAINER */\r\n.lookup {\r\n  grid-column: 1 / 2;\r\n  grid-row: 2 / 3;\r\n  background: var(--colorGrey);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  padding: 2rem 5rem;\r\n}\r\n\r\n#error {\r\n  font-size: --var(--lengthSm1);\r\n  color: red;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  gap: 1rem;\r\n  align-items: center;\r\n}\r\n\r\ninput {\r\n  font-size: var(--lengthMd3);\r\n  padding: 0.75rem 1rem;\r\n  outline: none;\r\n  border: 2px solid var(--colorAccent);\r\n  border-radius: 10px;\r\n  padding-left: 0.5rem;\r\n}\r\n\r\nbutton {\r\n  font-size: var(--lengthMd3);\r\n  background: var(--colorAccent);\r\n  border: none;\r\n  color: var(--colorGrey);\r\n  padding: 1rem;\r\n  border-radius: 10px;\r\n}\r\n\r\nbutton:hover {\r\n  cursor: pointer;\r\n  background: var(--colorAccentHover);\r\n}\r\n\r\n/* INFO CONTAINER */\r\n.info {\r\n  grid-column: 2 / 3;\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 2rem 5rem;\r\n  font-size: var(--lengthLg1);\r\n  color: var(--colorText);\r\n  text-align: center;\r\n}\r\n\r\n#condition,\r\n#location,\r\n#temperature {\r\n  color: var(--colorAccent);\r\n}\r\n\r\n#condition {\r\n  align-self: flex-start;\r\n}\r\n\r\n#location {\r\n  align-self: flex-start;\r\n  font-size: var(--lengthLg3);\r\n}\r\n\r\n#temperature {\r\n  font-size: var(--lengthLg3);\r\n  align-self: flex-end;\r\n  color: var(--colorPrimary);\r\n  border-radius: 10px;\r\n  padding: 0.5rem;\r\n}\r\n\r\n#temperature:hover {\r\n  background: var(--colorGrey);\r\n}\r\n\r\n.temp-condition-container {\r\n  display: flex;\r\n  gap: 3rem;\r\n  align-items: center;\r\n}\r\n\r\nbutton#toggle-units {\r\n  margin-top: 1rem;\r\n  width: 130px;\r\n}\r\n\r\n/* MEDIA QUERY */\r\n@media (max-width: 1000px) {\r\n  body {\r\n    grid-template-columns: 1fr; /* Change grid layout to one column */\r\n  }\r\n\r\n  .header {\r\n    grid-column: 1 / 2;\r\n    grid-row: 1 / 2;\r\n  }\r\n\r\n  .lookup {\r\n    grid-column: 1 / 2; /* Change to span only one column */\r\n    grid-row: 2 / 3;\r\n  }\r\n\r\n  .info {\r\n    grid-column: 1 / 2; /* Change to span only one column */\r\n    grid-row: 3 / 4;\r\n  }\r\n}\r\n'],sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,A){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);t&&a[d[0]]||(void 0!==A&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=A),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),A="/*# ".concat(o," */");return[e].concat([A]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var A={},a=[],i=0;i<n.length;i++){var c=n[i],l=t.base?c[0]+t.base:c[0],d=A[l]||0,s="".concat(l," ").concat(d);A[l]=d+1;var u=r(s),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var g=o(m,t);t.byIndex=i,e.splice(i,0,{identifier:s,updater:g,references:1})}a.push(s)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var A=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<A.length;a++){var i=r(A[a]);e[i].references--}for(var c=t(n,o),l=0;l<A.length;l++){var d=r(A[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}A=c}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var A=r.sourceMap;A&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(A))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var A=e[t]={id:t,exports:{}};return n[t](A,A.exports,r),A.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{const n=(()=>{const n=document.querySelector("input"),e=document.getElementById("location"),r=document.getElementById("temperature"),t=document.getElementById("condition"),o=document.getElementById("feels-like"),A=document.getElementById("humidity"),a=document.getElementById("wind"),i=document.getElementById("wind-direction"),c=document.getElementById("precipitation"),l=document.getElementById("last-updated"),d=document.getElementById("error"),s=document.getElementById("toggle-units");function u(){n.value=""}function m(n,e=""){n?(d.textContent=e,d.style.display="block"):d.style.display="none"}return{updateDisplay:function(n,d){var g;u(),m(!1),g=d,s.textContent="Metric"===g?"Imperial":"Metric";const{location:B,current:p}=n;e.textContent=`${B.name}, ${B.region}, ${B.country}`,t.textContent=p.condition.text,A.textContent=`Humidity: ${p.humidity}`,i.textContent=`Wind Direction: ${p.wind_dir}`,l.textContent=`Last Updated: ${p.last_updated}`,r.textContent="Metric"===d?`${p.temp_c} °C`:`${p.temp_f} °F`,a.textContent="Metric"===d?`Wind: ${p.wind_kph} kph`:`Wind: ${p.wind_mph} mph`,o.textContent="Metric"===d?`Feels Like: ${p.feelslike_c} °C`:`Feels Like: ${p.feelslike_f} °F`,c.textContent="Metric"===d?`Precipitation: ${p.precip_mm} mm`:`Precipitation: ${p.precip_in} in`},resetInput:u,toggleError:m}})(),e=function(){return new Promise(((n,e)=>{"geolocation"in navigator?navigator.geolocation.getCurrentPosition((e=>{const{latitude:r,longitude:t}=e.coords;n([r,t])}),(()=>{n(null)})):e(new Error("Geolocation is not available in this browser."))}))},t=(()=>{const r=document.querySelector("form"),o=document.getElementById("current-location"),A=document.getElementById("toggle-units"),a=document.getElementById("temperature"),i=document.getElementById("location");let c="Metric";function l(){c="Metric"===c?"Imperial":"Metric"}async function d(e){try{const n=await fetch(`https://api.weatherapi.com/v1/current.json?key=fda6ad22a48445cabbe213714230208&q=${e}`,{mode:"cors"});return await n.json()}catch(e){throw n.toggleError(!0,e.message),e}}return r.addEventListener("submit",(e=>{e.preventDefault();const r=e.target.querySelector("input").value;r&&d(r).then((e=>{try{n.updateDisplay(e,c)}catch{n.toggleError(!0,e.error.message)}}))})),o.addEventListener("click",(async()=>{const[r,o]=await e();t.getWeatherData(`${r},${o}`).then((e=>{n.updateDisplay(e,c)}))})),a.addEventListener("click",(()=>{l(),t.getWeatherData(i.textContent).then((e=>{n.updateDisplay(e,c)}))})),A.addEventListener("click",(()=>{l(),t.getWeatherData(i.textContent).then((e=>{n.updateDisplay(e,c)}))})),{getWeatherData:d}})(),o=t;var A=r(379),a=r.n(A),i=r(795),c=r.n(i),l=r(569),d=r.n(l),s=r(565),u=r.n(s),m=r(216),g=r.n(m),B=r(589),p=r.n(B),E=r(426),C={};C.styleTagTransform=p(),C.setAttributes=u(),C.insert=d().bind(null,"head"),C.domAPI=c(),C.insertStyleElement=g(),a()(E.Z,C),E.Z&&E.Z.locals&&E.Z.locals,e().then((e=>{if(e){const[r,t]=[e[0],e[1]];o.getWeatherData(`${r},${t}`).then((e=>{n.updateDisplay(e,"Metric")}))}else o.getWeatherData("toronto").then((e=>{n.updateDisplay(e,"Metric")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,