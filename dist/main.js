(()=>{"use strict";const t=(()=>{const t=document.querySelector("input"),e=document.getElementById("location"),n=document.getElementById("temperature"),o=document.getElementById("condition"),i=document.getElementById("feels-like"),r=document.getElementById("humidity"),a=document.getElementById("wind"),c=document.getElementById("wind-direction"),d=document.getElementById("precipitation"),l=document.getElementById("last-updated"),u=document.getElementById("error"),s=document.getElementById("toggle-units");function m(){t.value=""}function p(t,e=""){t?(u.textContent=e,u.style.display="block"):u.style.display="none"}return{updateDisplay:function(t,u){var g;m(),p(!1),g=u,s.textContent="Metric"===g?"Imperial":"Metric";const{location:y,current:h}=t;e.textContent=`${y.name}, ${y.region}, ${y.country}`,o.textContent=h.condition.text,r.textContent=`Humidity: ${h.humidity}`,c.textContent=`Wind Direction: ${h.wind_dir}`,l.textContent=`Last Updated: ${h.last_updated}`,n.textContent="Metric"===u?`${h.temp_c} 째C`:`${h.temp_f} 째F`,a.textContent="Metric"===u?`Wind: ${h.wind_kph} kph`:`Wind: ${h.wind_mph} mph`,i.textContent="Metric"===u?`Feels Like: ${h.feelslike_c} 째C`:`Feels Like: ${h.feelslike_f} 째F`,d.textContent="Metric"===u?`Precipitation: ${h.precip_mm} mm`:`Precipitation: ${h.precip_in} in`},resetInput:m,toggleError:p}})(),e=function(){return new Promise(((t,e)=>{"geolocation"in navigator?navigator.geolocation.getCurrentPosition((e=>{const{latitude:n,longitude:o}=e.coords;t([n,o])}),(()=>{t(null)})):e(new Error("Geolocation is not available in this browser."))}))},n=(()=>{const o=document.querySelector("form"),i=document.getElementById("current-location"),r=document.getElementById("toggle-units"),a=document.getElementById("location");let c="Metric";async function d(e){try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=fda6ad22a48445cabbe213714230208&q=${e}`,{mode:"cors"});return await t.json()}catch(e){throw t.toggleError(!0,e.message),e}}return o.addEventListener("submit",(e=>{e.preventDefault();const n=e.target.querySelector("input").value;n&&d(n).then((e=>{try{t.updateDisplay(e,c)}catch{t.toggleError(!0,e.error.message)}}))})),i.addEventListener("click",(async()=>{const[o,i]=await e();n.getWeatherData(`${o},${i}`).then((e=>{t.updateDisplay(e,c)}))})),r.addEventListener("click",(()=>{c="Metric"===c?"Imperial":"Metric",n.getWeatherData(a.textContent).then((e=>{t.updateDisplay(e,c)}))})),{getWeatherData:d}})(),o=n;e().then((e=>{if(e){const[n,i]=[e[0],e[1]];o.getWeatherData(`${n},${i}`).then((e=>{t.updateDisplay(e,"Metric")}))}else o.getWeatherData("toronto").then((e=>{t.updateDisplay(e,"Metric")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,