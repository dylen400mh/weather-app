(()=>{"use strict";const t=(()=>{const t=document.querySelector("input"),e=document.getElementById("location"),n=document.getElementById("temperature"),o=document.getElementById("condition"),i=document.getElementById("feels-like"),r=document.getElementById("humidity"),c=document.getElementById("wind"),a=document.getElementById("wind-direction"),d=document.getElementById("precipitation"),u=document.getElementById("last-updated"),m=document.getElementById("error");function l(){t.value=""}function s(t,e=""){t?(m.textContent=e,m.style.display="block"):m.style.display="none"}return{updateDisplay:function(t,m){l(),s(!1);const p=t.current,{location:y}=t;e.textContent=`${y.name}, ${y.region}, ${y.country}`,o.textContent=p.condition.text,r.textContent=`Humidity: ${p.humidity}`,a.textContent=`Wind Direction: ${p.wind_dir}`,u.textContent=`Last Updated: ${p.last_updated}`,"metric"===m&&(n.textContent=`${p.temp_c} 째C`,c.textContent=`Wind: ${p.wind_kph} kph`,i.textContent=`Feels Like: ${p.feelslike_c} 째C`,d.textContent=`Precipitation: ${p.precip_mm} mm`),"imperial"===m&&(n.textContent=`${p.temp_f} 째F`,c.textContent=`Wind: ${p.wind_mph} mph`,i.textContent=`Feels Like: ${p.feelslike_f} 째F`,d.textContent=`Precipitation: ${p.precip_in} in`)},resetInput:l,toggleError:s}})(),e=function(){return new Promise(((t,e)=>{"geolocation"in navigator&&navigator.geolocation.getCurrentPosition((e=>{const{latitude:n,longitude:o}=e.coords;t([n,o])}),(t=>{e(t)}))}))},n=(()=>{const o=document.querySelector("form"),i=document.getElementById("current-location");async function r(e){try{const t=await fetch(`https://api.weatherapi.com/v1/current.json?key=fda6ad22a48445cabbe213714230208&q=${e}`,{mode:"cors"});return await t.json()}catch(e){throw t.toggleError(!0,e.message),e}}return o.addEventListener("submit",(e=>{e.preventDefault();const n=e.target.querySelector("input").value;n&&r(n).then((e=>{try{t.updateDisplay(e,"metric")}catch{t.toggleError(!0,e.error.message)}}))})),i.addEventListener("click",(async()=>{const[o,i]=await e();n.getWeatherData(`${o},${i}`).then((e=>{t.updateDisplay(e,"metric")}))})),{getWeatherData:r}})(),o=n;e().then((e=>{const[n,i]=[e[0],e[1]];o.getWeatherData(`${n},${i}`).then((e=>{t.updateDisplay(e,"metric")}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,